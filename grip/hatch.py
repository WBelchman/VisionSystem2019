import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__blur_type = BlurType.Box_Blur
        self.__blur_radius = 2.7027027027027026

        self.blur_output = None

        self.__hsv_threshold_input = self.blur_output
        self.__hsv_threshold_hue = [0.0, 30.254668930390498]
        self.__hsv_threshold_saturation = [130.71043165467626, 255.0]
        self.__hsv_threshold_value = [135.29676258992808, 224.6943972835314]
    
        self.hsv_threshold_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Blur0:
        self.__blur_input = source0
        (self.blur_output) = self.__blur(self.__blur_input, self.__blur_type, self.__blur_radius)

        # Step HSV_Threshold0:
        self.__hsv_threshold_input = self.blur_output
        (self.hsv_threshold_output) = self.__hsv_threshold(self.__hsv_threshold_input, self.__hsv_threshold_hue, self.__hsv_threshold_saturation, self.__hsv_threshold_value)


    @staticmethod
    def __blur(src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if(type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif(type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif(type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
            Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
            Returns:
            A black and white numpy.ndarray.
            """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

def find_circles(contours):

    for cnt in contours:
        (x, y), rad = cv2.minEnclosingCircle(cnt)
            
        if rad > radius_threshold:

            circle = [(int(x), int(y)), int(rad)]

            circle_list.append(circle)

    return circle_list


from picamera.array import PiRGBArray
from picamera import PiCamera

BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')

cam = PiCamera()
cam.resolution = (640, 480)
cam.framerate = 32
rawCap = PiRGBArray(cam, size=cam.resolution)

g = GripPipeline()

radius_threshold = 100

for frame in cam.capture_continuous(rawCap, format="bgr", use_video_port=True):

    circle_list=[]

    frame = frame.array

    g.process(frame)
    threshed_frame = g.hsv_threshold_output

    ret, thresh = cv2.threshold(threshed_frame, 127, 255, cv2.THRESH_BINARY)
    frame2, contours, heirarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    try:
        circle_list = find_circles(contours)

    except Exception as e:
        print(e)

    try:
        crl = circle_list[-1]
        
        cv2.circle(frame, crl[0], crl[1], (0,255,0), 2)
        cv2.circle(frame, crl[0], 5, (0, 0, 255), -1)
        
        print("Center:", crl[0], "Radius:", crl[1])

    except:
        pass
    


    if circle_list != []:
        print("************************")

    cv2.imshow('frame', frame)

    rawCap.truncate(0)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break












